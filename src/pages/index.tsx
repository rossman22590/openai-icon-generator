import { useEffect, useState } from 'react'
import Head from 'next/head';
import { Configuration, OpenAIApi } from "openai";



export default function Home() {
  const [transparentActive, setTransparentActive] = useState(false);
  const [whiteActive, setWhiteActive] = useState(false);
  const [greyActive, setGreyActive] = useState(false);
  const [blackACtive, setBlackActive] = useState(false);

  const [inputValue, setInputValue] = useState('');
  const [outputResults, setOutputResults] = useState(false);
  const [downloadAsset, setDownloadAsset] = useState(null);

  const API_KEY = process.env.OPEN_API_KEY

  // require('dotenv').config()
  useEffect(() => {
    console.log('hello');
    console.log("API_KEY", API_KEY)
  }, []);
  

  const handleRadioSelect = (e:any) => {
    console.log(e);
    // provide active class to item, so user knows its been selected 
    if (e.target.checked) {
      // console.log(e.target.value)
      // console.log(e.target.parentElement)

      if (e.target.value === 'transparent') {
        setTransparentActive(true);
        setWhiteActive(false);
        setGreyActive(false);
        setBlackActive(false);
      } else if (e.target.value === 'white') {
        setTransparentActive(false);
        setWhiteActive(true);
        setGreyActive(false);
        setBlackActive(false);
      } else if (e.target.value === 'grey') {
        setTransparentActive(false);
        setWhiteActive(false);
        setGreyActive(true);
        setBlackActive(false);
      } else if (e.target.value === 'black') {
        setTransparentActive(false);
        setWhiteActive(false);
        setGreyActive(false);
        setBlackActive(true);

      }
    }
  }

  const handleSubmit = (e:any) => {
    e.preventDefault();
    console.log(inputValue)
    if (inputValue === '') {
      alert('Please add some text');
      setOutputResults(false)
      return;
    }
    setOutputResults(true)
  }
  

  return (
    <>
      <Head>
        <title>OpenAI Icon Generator</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main className="main">
        <form action="/send-data-here" method="post" className="flex flex-col items-center">
          <div className="container flex justify-center items-center">
            <span className="text-5xl">Welcome to</span>
            <span className="ml-3 text-5xl">AIcon</span>
          </div>
          <div className="container flex justify-center items-center mt-6">
            <span className="text-2xl">
              Create your very own custom AI generated icons
            </span>
          </div>

          <div className="container flex justify-center items-center mt-6">
            <span className="text-3xl mr-4">I would like an icon of a </span>
            <input 
            className="text-2xl"
            type="text" 
            id="prompt" 
            placeholder="smiley face" 
            onChange={(event) =>
              setInputValue(event.target.value)
            }
            />
          </div>

           <div className="container flex justify-center items-center mt-6">
            <span className="text-2xl">Select background color: </span>

            <div className="grid grid-col-4 grid-flow-col gap-4 ml-6">
              <div className='flex flex-col items-center'>
                <label htmlFor="transparent" className={`flex w-16 h-16 rounded-lg border-dashed border-2 border-gray-500 cursor-pointer ${transparentActive ? "active" : ""}`} onClick={handleRadioSelect}>
                  <input className="hidden pointer" type="radio" id="transparent" name="transparent" value="transparent" />
                </label>
                 Transparent
              </div>

              <div className='flex flex-col items-center'>
                <label htmlFor="white" className={`flex w-16 h-16 border rounded-lg cursor-pointer ${whiteActive ? "active" : ""}`} onClick={handleRadioSelect}>
                  <input className="hidden pointer" type="radio" id="white" name="white" value="white" />
                </label>
                 White
              </div>

              <div className='flex flex-col items-center'>
                <label htmlFor="grey" className={`flex w-16 h-16 border rounded-lg bg-gray-200 cursor-pointer ${greyActive ? "active" : ""}`} onClick={handleRadioSelect}>
                  <input className="hidden pointer" type="radio" id="grey" name="grey" value="grey" />
                </label>
                 Grey
              </div>

              <div className='flex flex-col items-center'>
                <label htmlFor="black" className={`flex w-16 h-16 border rounded-lg bg-black cursor-pointer ${blackACtive ? "active" : ""}`} onClick={handleRadioSelect}>
                  <input className="hidden pointer" type="radio" id="black" name="black" value="black" />
                </label>
                 Black
              </div>

             
            </div>
          </div>
          <button className='mt-12 rounded-lg bg-blue-500 text-white p-4 h-auto' type="submit" onClick={handleSubmit}>Generate</button>

          {outputResults && 
            <div className="mt-12 results-container container rounded-lg flex bg-gray-200 w-16 h-16"></div>
          }
        </form>
      </main>
    </>
  )
}
